... Spread
The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls)
or elements (for array literals) are expected.
In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.

eg:
function add(...values){
    let sum = 0
    for(var i=0;i<values.length;i++){
        sum+=values[i];
    }
    console.log("Sum ="+sum);
}

add(10,5,9,11,19)


Adding Array

var books = ["Science", "Maths", "English"]
var extraBooks = ["Python", "Java", "React"]
var allbooks = []

for (let i = 0; i < books.length; i++) {
    allbooks[i] = books[i]
}

let currentLength = allbooks.length  // store the current length once

for (let i = 0; i < extraBooks.length; i++) {
    allbooks[i + currentLength] = extraBooks[i]
}

console.log(allbooks)




forEach
var num=[1,2,3,4,5,6]
num.forEach(
    (ele,index)=>{
        console.log("Element = ",ele,"Index =",index)
    }
    )
A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.


1. Create a function that calculates the sum of numbers in an array using rest and spread operators
 function sumOfNumbers(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}

// Example usage:
const arr = [1, 2, 3, 4, 5];
console.log(sumOfNumbers(...arr));  // Output: 15

2.Create a function to merge and destructure objects
  
